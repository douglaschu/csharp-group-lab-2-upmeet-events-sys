{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AddEventFormComponent {\n  //@Input() events: Event[];\n  constructor() {\n    this.newEvent = {};\n    this.eventCreated = new EventEmitter();\n    this.displayForm = false;\n  }\n  ngOnInit() {}\n  //trying ngForm for form\n  // submitEvent = (submit: NgForm) => {\n  //   this.eventCreated.emit({\n  //     eventName: submit.value.eventName,\n  //     eventDate: submit.value.eventDate,\n  //     eventTime: submit.value.eventTime,\n  //     eventLocation: submit.value.eventLocation,\n  //     eventVenue: submit.value.eventVenue,\n  //     eventDescription: submit.value.eventDescription,\n  //     price: submit.value.price,\n  //     eventImage: submit.value.image,\n  //     eventCategory: submit.value.eventCategory,\n  //     id: submit.value.id,\n  //     //I don't know if this will work with ngForm (identity)\n  //   });\n  //   this.new;\n  // };\n  submitEvent() {\n    this.eventCreated.emit(this.newEvent);\n    this.newEvent = {};\n    //resets all form fields after submit\n  }\n\n  toggleDisplay() {\n    this.displayForm = !this.displayForm;\n  }\n}\nAddEventFormComponent.ɵfac = function AddEventFormComponent_Factory(t) {\n  return new (t || AddEventFormComponent)();\n};\nAddEventFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddEventFormComponent,\n  selectors: [[\"app-add-event-form\"]],\n  outputs: {\n    eventCreated: \"eventCreated\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function AddEventFormComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAuB,eAAe;;AAStE,OAAM,MAAOC,qBAAqB;EAGhC;EAEAC;IAJA,aAAQ,GAAU,EAAW;IACnB,iBAAY,GAAG,IAAIF,YAAY,EAAS;IAgClD,gBAAW,GAAY,KAAK;EA7Bb;EAEfG,QAAQ,IAAU;EAElB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,WAAW;IACT,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC;IACrC,IAAI,CAACA,QAAQ,GAAG,EAAW;IAE3B;EACF;;EAGAC,aAAa;IACX,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;EACtC;;AArCWR,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAS;EAAAC;IAAAN;EAAA;EAAAO;EAAAC;EAAAC;EAAAC;AAAA","names":["EventEmitter","AddEventFormComponent","constructor","ngOnInit","submitEvent","eventCreated","emit","newEvent","toggleDisplay","displayForm","selectors","outputs","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Users\\maria\\source\\repos\\UpMeet Group Project\\csharp-group-lab-2-upmeet-events-sys\\ClientApp\\src\\app\\components\\add-event-form\\add-event-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Event } from 'src/app/models/event';\r\n\r\n@Component({\r\n  selector: 'app-add-event-form',\r\n  templateUrl: './add-event-form.component.html',\r\n  styleUrls: ['./add-event-form.component.css'],\r\n})\r\nexport class AddEventFormComponent {\r\n  newEvent: Event = {} as Event;\r\n  @Output() eventCreated = new EventEmitter<Event>();\r\n  //@Input() events: Event[];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  //trying ngForm for form\r\n  // submitEvent = (submit: NgForm) => {\r\n  //   this.eventCreated.emit({\r\n  //     eventName: submit.value.eventName,\r\n  //     eventDate: submit.value.eventDate,\r\n  //     eventTime: submit.value.eventTime,\r\n  //     eventLocation: submit.value.eventLocation,\r\n  //     eventVenue: submit.value.eventVenue,\r\n  //     eventDescription: submit.value.eventDescription,\r\n  //     price: submit.value.price,\r\n  //     eventImage: submit.value.image,\r\n  //     eventCategory: submit.value.eventCategory,\r\n  //     id: submit.value.id,\r\n  //     //I don't know if this will work with ngForm (identity)\r\n  //   });\r\n  //   this.new;\r\n  // };\r\n\r\n  submitEvent() {\r\n    this.eventCreated.emit(this.newEvent);\r\n    this.newEvent = {} as Event;\r\n\r\n    //resets all form fields after submit\r\n  }\r\n\r\n  displayForm: boolean = false;\r\n  toggleDisplay(): void {\r\n    this.displayForm = !this.displayForm;\r\n  }\r\n  //Justin's method without ngForm\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}