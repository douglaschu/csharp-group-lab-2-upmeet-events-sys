{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AddEventFormComponent {\n  //@Input() events: Event[];\n  constructor() {\n    this.newEvent = {};\n    this.eventCreated = new EventEmitter();\n    this.displayForm = false;\n  }\n  ngOnInit() {}\n  //trying ngForm for form\n  // submitEvent = (submit: NgForm) => {\n  //   this.eventCreated.emit({\n  //     eventName: submit.value.eventName,\n  //     eventDate: submit.value.eventDate,\n  //     eventTime: submit.value.eventTime,\n  //     eventLocation: submit.value.eventLocation,\n  //     eventVenue: submit.value.eventVenue,\n  //     eventDescription: submit.value.eventDescription,\n  //     price: submit.value.price,\n  //     eventImage: submit.value.image,\n  //     eventCategory: submit.value.eventCategory,\n  //     id: submit.value.id,\n  //     //I don't know if this will work with ngForm (identity)\n  //   });\n  //   this.new;\n  // };\n  submitEvent() {\n    this.eventCreated.emit(this.newEvent);\n    this.newEvent = {};\n    //resets all form fields after submit\n  }\n\n  toggleDisplay() {\n    this.displayForm = !this.displayForm;\n  }\n}\nAddEventFormComponent.ɵfac = function AddEventFormComponent_Factory(t) {\n  return new (t || AddEventFormComponent)();\n};\nAddEventFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddEventFormComponent,\n  selectors: [[\"app-add-event-form\"]],\n  outputs: {\n    eventCreated: \"eventCreated\"\n  },\n  decls: 31,\n  vars: 8,\n  consts: [[1, \"Create\", \"New\", \"Event\", 3, \"click\"], [1, \"form\"], [1, \"box\"], [1, \"fields\"], [\"for\", \"eventName\"], [\"type\", \"text\", \"id\", \"eventName\", \"name\", \"Event Name\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventDate\"], [\"type\", \"date\", \"id\", \"eventDate\", \"name\", \"Event Date\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventTime\"], [\"type\", \"time\", \"id\", \"eventTime\", \"name\", \"Event Time\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventLocation\"], [\"type\", \"text\", \"id\", \"eventLocation\", \"name\", \"Location\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventVenue\"], [\"type\", \"text\", \"id\", \"eventVenue\", \"name\", \"Venue\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventDescription\"], [\"type\", \"text\", \"id\", \"eventDescription\", \"name\", \"Description\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"price\"], [\"type\", \"number\", \"id\", \"price\", \"name\", \"Price\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"eventImage\"], [\"type\", \"text\", \"id\", \"eventImage\", \"name\", \"Image\", 3, \"ngModel\", \"ngModelChange\"]],\n  template: function AddEventFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"body\")(1, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function AddEventFormComponent_Template_button_click_1_listener() {\n        return ctx.toggleDisplay();\n      });\n      i0.ɵɵtext(2, \"New Event\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1)(4, \"div\", 2)(5, \"div\", 3)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Event Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.newEvent.eventName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.newEvent.eventDate = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"label\", 8);\n      i0.ɵɵtext(13, \"Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.newEvent.eventTime = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"label\", 10);\n      i0.ɵɵtext(16, \"Location\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_17_listener($event) {\n        return ctx.newEvent.eventLocation = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"label\", 12);\n      i0.ɵɵtext(19, \"Venue\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_20_listener($event) {\n        return ctx.newEvent.eventVenue = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"label\", 14);\n      i0.ɵɵtext(22, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"input\", 15);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_23_listener($event) {\n        return ctx.newEvent.eventDescription = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"label\", 16);\n      i0.ɵɵtext(25, \"Admission Price\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"input\", 17);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_26_listener($event) {\n        return ctx.newEvent.price = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"label\", 18);\n      i0.ɵɵtext(28, \"Image Filepath\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"input\", 19);\n      i0.ɵɵlistener(\"ngModelChange\", function AddEventFormComponent_Template_input_ngModelChange_29_listener($event) {\n        return ctx.newEvent.eventImage = $event;\n      });\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtext(30, \">\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventName);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventDate);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventTime);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventLocation);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventVenue);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventDescription);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.price);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newEvent.eventImage);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAuB,eAAe;;AAStE,OAAM,MAAOC,qBAAqB;EAGhC;EAEAC;IAJA,aAAQ,GAAU,EAAW;IACnB,iBAAY,GAAG,IAAIF,YAAY,EAAS;IAgClD,gBAAW,GAAY,KAAK;EA7Bb;EAEfG,QAAQ,IAAU;EAElB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,WAAW;IACT,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAACC,QAAQ,CAAC;IACrC,IAAI,CAACA,QAAQ,GAAG,EAAW;IAE3B;EACF;;EAGAC,aAAa;IACX,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;EACtC;;AArCWR,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAS;EAAAC;IAAAN;EAAA;EAAAO;EAAAC;EAAAC;EAAAC;IAAA;MCTlCC,4BAAM;MAC+BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,yBAAS;MAAAA,iBAAS;MAC7EA,+BAAmB;MAGgBA,0BAAU;MAAAA,iBAAQ;MACzCA,gCAAsF;MAAlCA;QAAA;MAAA,EAAgC;MAApFA,iBAAsF;MACtFA,gCAAuB;MAAAA,qBAAI;MAAAA,iBAAQ;MACnCA,iCAAsF;MAAlCA;QAAA;MAAA,EAAgC;MAApFA,iBAAsF;MACtFA,iCAAuB;MAAAA,qBAAI;MAAAA,iBAAQ;MACnCA,iCAAsF;MAAlCA;QAAA;MAAA,EAAgC;MAApFA,iBAAsF;MACtFA,kCAA2B;MAAAA,yBAAQ;MAAAA,iBAAQ;MAC3CA,kCAA4F;MAAtCA;QAAA;MAAA,EAAoC;MAA1FA,iBAA4F;MAC5FA,kCAAwB;MAAAA,sBAAK;MAAAA,iBAAQ;MACrCA,kCAAmF;MAAnCA;QAAA;MAAA,EAAiC;MAAjFA,iBAAmF;MACnFA,kCAA8B;MAAAA,4BAAW;MAAAA,iBAAQ;MACjDA,kCAAoG;MAAxCA;QAAA;MAAA,EAAuC;MAAnGA,iBAAoG;MACpGA,kCAAmB;MAAAA,gCAAe;MAAAA,iBAAQ;MAC1CA,kCAA0E;MAA7BA;QAAA;MAAA,EAA4B;MAAzEA,iBAA0E;MAC1EA,kCAAwB;MAAAA,+BAAc;MAAAA,iBAAQ;MAC9CA,kCAAkF;MAAlCA;QAAA;MAAA,EAAiC;MAAjFA,iBAAkF;MAI3FA,kBAAC;;;MAlB4DA,eAAgC;MAAhCA,gDAAgC;MAEhCA,eAAgC;MAAhCA,gDAAgC;MAEhCA,eAAgC;MAAhCA,gDAAgC;MAE9BA,eAAoC;MAApCA,oDAAoC;MAE1CA,eAAiC;MAAjCA,iDAAiC;MAErBA,eAAuC;MAAvCA,uDAAuC;MAEtDA,eAA4B;MAA5BA,4CAA4B;MAEzBA,eAAiC;MAAjCA,iDAAiC","names":["EventEmitter","AddEventFormComponent","constructor","ngOnInit","submitEvent","eventCreated","emit","newEvent","toggleDisplay","displayForm","selectors","outputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\maria\\source\\repos\\UpMeet Group Project\\csharp-group-lab-2-upmeet-events-sys\\ClientApp\\src\\app\\components\\add-event-form\\add-event-form.component.ts","C:\\Users\\maria\\source\\repos\\UpMeet Group Project\\csharp-group-lab-2-upmeet-events-sys\\ClientApp\\src\\app\\components\\add-event-form\\add-event-form.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Event } from 'src/app/models/event';\r\n\r\n@Component({\r\n  selector: 'app-add-event-form',\r\n  templateUrl: './add-event-form.component.html',\r\n  styleUrls: ['./add-event-form.component.css'],\r\n})\r\nexport class AddEventFormComponent {\r\n  newEvent: Event = {} as Event;\r\n  @Output() eventCreated = new EventEmitter<Event>();\r\n  //@Input() events: Event[];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  //trying ngForm for form\r\n  // submitEvent = (submit: NgForm) => {\r\n  //   this.eventCreated.emit({\r\n  //     eventName: submit.value.eventName,\r\n  //     eventDate: submit.value.eventDate,\r\n  //     eventTime: submit.value.eventTime,\r\n  //     eventLocation: submit.value.eventLocation,\r\n  //     eventVenue: submit.value.eventVenue,\r\n  //     eventDescription: submit.value.eventDescription,\r\n  //     price: submit.value.price,\r\n  //     eventImage: submit.value.image,\r\n  //     eventCategory: submit.value.eventCategory,\r\n  //     id: submit.value.id,\r\n  //     //I don't know if this will work with ngForm (identity)\r\n  //   });\r\n  //   this.new;\r\n  // };\r\n\r\n  submitEvent() {\r\n    this.eventCreated.emit(this.newEvent);\r\n    this.newEvent = {} as Event;\r\n\r\n    //resets all form fields after submit\r\n  }\r\n\r\n  displayForm: boolean = false;\r\n  toggleDisplay(): void {\r\n    this.displayForm = !this.displayForm;\r\n  }\r\n  //Justin's method without ngForm\r\n}\r\n","<body>\r\n    <button class=\"Create New Event\" (click)=\"toggleDisplay()\">New Event</button>\r\n    <form class='form'>\r\n        <div class=\"box\">\r\n            <div class=\"fields\">\r\n                <label for=\"eventName\">Event Name</label>\r\n                <input type=\"text\" id=\"eventName\" name=\"Event Name\" [(ngModel)]=\"newEvent.eventName\"/>\r\n                <label for=\"eventDate\">Date</label>\r\n                <input type=\"date\" id=\"eventDate\" name=\"Event Date\" [(ngModel)]=\"newEvent.eventDate\"/>\r\n                <label for=\"eventTime\">Time</label>\r\n                <input type=\"time\" id=\"eventTime\" name=\"Event Time\" [(ngModel)]=\"newEvent.eventTime\"/>\r\n                <label for=\"eventLocation\">Location</label>\r\n                <input type=\"text\" id=\"eventLocation\" name=\"Location\" [(ngModel)]=\"newEvent.eventLocation\"/>\r\n                <label for=\"eventVenue\">Venue</label>\r\n                <input type=\"text\" id=\"eventVenue\" name=\"Venue\" [(ngModel)]=\"newEvent.eventVenue\"/>\r\n                <label for=\"eventDescription\">Description</label>\r\n                <input type=\"text\" id=\"eventDescription\" name=\"Description\" [(ngModel)]=\"newEvent.eventDescription\">\r\n                <label for=\"price\">Admission Price</label>\r\n                <input type=\"number\" id=\"price\" name=\"Price\" [(ngModel)]=\"newEvent.price\">\r\n                <label for=\"eventImage\">Image Filepath</label>\r\n                <input type=\"text\" id=\"eventImage\" name=\"Image\" [(ngModel)]=\"newEvent.eventImage\">\r\n            </div>\r\n        </div>\r\n    </form>\r\n</body>>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}